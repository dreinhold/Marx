
					//~ pid = fork(); //fork the proceess to a child process
					//~ 
					//~ if(pid < 0)
					//~ {
						//~ printf("ERROR!\n");
						//~ quitWithError("Could not get a PID for child process"); //new way to handle errors
//~ 
						//~ exit(EXIT_FAILURE); // exit, things have failed
					//~ }
					//~ 
					//~ if(pid > 0)
					//~ {
						//~ //Things have succeeded
						//~ exit(EXIT_SUCCESS); // exit, things have failed
					//~ }
					//~ 
					//~ umask(0); //change the file mask
					//~ 
					//~ sid = setsid(); //get a set id for child process
						//~ 
						//~ 
					//~ if(sid < 0)
					//~ {
						//~ printf("ERROR!\n");
						//~ quitWithError("Could not get a SID for child process"); //new way to handle errors
						//~ exit(EXIT_FAILURE); // exit, things have failed
					//~ }
					//~ 
					//~ /* Change the current working directory */
					//~ if ((chdir("/")) < 0) {
					//~ /* Log any failure here */
					//~ exit(EXIT_FAILURE);
					//~ }
					//~ //closes the standard display stuff
					//~ /* Close out the standard file descriptors */
					//~ close(STDIN_FILENO);
					//~ //close(STDOUT_FILENO); //standard output
					//~ close(STDERR_FILENO);
					//~ 
					
					
														//~ newsockfd = accept(sockfd, (struct sockaddr *) &cli_addr, &clilen);
									//~ if (newsockfd != -1)
									//~ {
										//~ 
									//~ }
								//~ bzero(buffer,256);
								
								//~ char* text = (char *) malloc(256 * sizeof(char));
								//~ text = recieveMessage(newsockfd);
								//~ strcpy(text,buffer);
								//~ bzero(text,1024);
								
								//~ char *hostName;
								//~ int sendVar = ZERO_OUT_VALUE;
								//~ int *sendVarPtr = &sendVar;
								//~ 
								//~ int recieveVar = ZERO_OUT_VALUE;
								//~ int *recieveVarPtr = &recieveVar;
								//~ 
								//~ recv(newsockfd,recieveVarPtr,sizeof(int),0);
								//~ 
								//~ 
								//~ switch(recieveVar)
								//~ {
									//~ case NEW_NODE:
									//~ sendVar = SEND_HOSTNAME;
									//~ send(newsockfd,sendVarPtr,sizeof(int),0);
									//~ hostName = recieveMessage(newsockfd);
									//~ break;
									//~ 
									//~ 
									//~ 
								//~ }
								//~ 
								
								//~ sendMessage(newsockfd,"HOSTNAME\0");
								//~ send(newsockfd,sendVarPtr,sizeof(int),0);
								
								
								
								
								
								//~ char ip[256]; //this is used for the hostname
								//~ char service[20];
								//~ 
								//~ socklen_t peerNameLength;
								//~ struct sockaddr_storage peerName;
								//~ 
								//~ peerNameLength = sizeof peerName;
								//~ n = getpeername(newsockfd, (struct sockaddr *) &peerName, &peerNameLength);
								//~ struct sockaddr_in *peerFinal = (struct sockaddr_in *) &peerName;
								//~ inet_ntop(AF_INET, &peerFinal->sin_addr,ip,sizeof(ip));
								//~ 
								//~ if (n < 0) puts("Couldnt extract hostname");
								//~ close(newsockfd);
							 //~ 
							 
							 
							 
							//~ int t = 0;
							
							
							  //~ printf("%d\n",sendVar);
				  //~ sendMessage(sockfd,"NEW\0");
				 //~ char *text = recieveMessage(sockfd);
				  //~ puts(text);
				  //~ if (text == "HOSTNAME")
				  //~ {
		
					  //~ 
				  //~ }
				  //~ n = send(sockfd,text,sizeof(text),0);
				  
				  //~ if (n < 0) error("ERROR reading from socket");
				  
				  //~ n = recv(sockfd,text,sizeof(text),0);
				  //~ if (buffer == "hostname")
				  //~ {
								  //~ bzero(buffer,256);
				  //~ gethostname(buffer, sizeof(buffer));
				  //~ n = send(sockfd,buffer,sizeof(buffer),0);
				  //~ if (n < 0) error("ERROR reading from socket");
				  //~ 
					//~ }
		
				  //~ gethostname(buffer, sizeof(buffer));
				  //~ fgets(buffer,255,stdin);
				  
				  
				  //~ n = write(sockfd,buffer,strlen(buffer));
				  //~ if (n < 0)
				  //~ {
					//~ quitWithError("ERROR writing to socket");
					//~ }
				  //~ bzero(buffer,256);
				  //~ n = read(sockfd,buffer,255);
				  //~ if (n < 0)
				  //~ {
					//~ quitWithError("ERROR reading from socket");
					//~ }
				  //~ printf("%s",buffer);
				  //~
				  
				  
				  				//~ if (loopPthreadCounter < maxThreads) //this is just a counter from withing the
								//~ {
									//~ loopPthreadCounter++;
								//~ }
								//~ else
								//~ {
									//~ loopPthreadCounter = 0;
								//~ }
								//~ 
								//~ return 0;
	//~ printf("This application is the %s, version : %s\n",appName,appVers);
 
